// scripts/generateLocaleMap.ts
import * as fs from "fs";
import * as path from "path";
import { i18nConfig } from "../docs.config.js";
import { fileURLToPath } from "url";

type LocaleConfig = {
  [locale: string]: boolean;
};

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const pagesDir = path.join(__dirname, "..", "pages");
const locales = Object.values(i18nConfig);

/**
 * Gets all MDX Files
 *
 * Recursively reads through each .mdx file in a given directory.
 * Returns a map of the path (without locale) to a dictionary
 * with locale to boolean value.
 *
 * @example
 * ```ts
 * {
 *    "/build/move": {
 *        en: true,
 *        zh: true
 *    }
 * }
 * ```
 */
function getAllMdxFiles(
  dirPath: string,
  locale: string,
  relativePath = "",
): Record<string, LocaleConfig> {
  const entries = fs.readdirSync(dirPath, { withFileTypes: true });
  let filesMap: Record<string, LocaleConfig> = {};

  for (const entry of entries) {
    const fullPath = path.join(dirPath, entry.name);
    const entryRelativePath = path.join(relativePath, entry.name);

    if (entry.isDirectory()) {
      filesMap = {
        ...filesMap,
        ...getAllMdxFiles(fullPath, locale, entryRelativePath),
      };
    } else if (entry.isFile() && entry.name.endsWith(".mdx")) {
      const normalizedPath =
        "/" + entryRelativePath.replace(`/${locale}`, "").replace(".mdx", "");

      // Set to false if does not exist, else true
      if (!filesMap[normalizedPath]) {
        filesMap[normalizedPath] = {};
      }
      filesMap[normalizedPath][locale] = true;
    }
  }

  return filesMap;
}

/**
 * Merge Locale Maps
 *
 * Given an array of maps, basically map-reduce over each key
 *
 */
function mergeLocaleMaps(
  maps: Record<string, LocaleConfig>[],
): Record<string, LocaleConfig> {
  return maps.reduce(
    (merged, map) => {
      for (const [key, value] of Object.entries(map)) {
        if (!merged[key]) {
          merged[key] = value;
        } else {
          merged[key] = { ...merged[key], ...value };
        }
      }
      return merged;
    },
    {} as Record<string, LocaleConfig>,
  );
}

function generateLocaleMap() {
  const localeMaps = locales.map((locale) =>
    getAllMdxFiles(path.join(pagesDir, locale.locale), locale.locale),
  );
  return mergeLocaleMaps(localeMaps);
}

function main() {
  const localeMap = generateLocaleMap();

  const dirPath = path.join(__dirname, "..", "utils/generated");

  const outputPath = path.join(
    dirPath,
    "localeMap.ts",
  );
  const localeMapContent = `// This file is autogenerated by generateLocaleMap.ts.
// Do NOT manually alter the contents of this file
// See package.json for more info on what script generates it

export const localeMap = ${JSON.stringify(localeMap, null, 2)};`;
  fs.mkdirSync(dirPath, { recursive: true });
  fs.writeFileSync(outputPath, localeMapContent, "utf8");
  console.log("localeMap.ts has been generated successfully.");
}

main();
